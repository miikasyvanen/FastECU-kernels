Using the kernel

***********
Needless to say, this is all experimental, and I can offer no guarantees of any kind.
Use at your own risk, and have fun !
~ fenugrec
***********

TODO : write protocol description somewhere else ?

(see Subaru specific comments in the SUBARU section below)

The kernel implements a type of iso14230-compliant communications, without requiring the delicate "fast init" wake-up pattern.
In other words, communications are established with a simple "StartCommunications" request.

The protocol is relatively simple; the commands can even be sent manually from any serious terminal software (like Realterm).
However longer data packets (as those sent during reflashing) are tedious to craft by hand and should be left to dedicated software, like nisprog !


***** Super important notes before starting !!
- plug your car to a battery charger while hacking / reflashing ! If the battery dies at the wrong moment, you'll have to unbrick the ECU !
- make a backup of your ROM before you try changing anything ! Also make sure your ROM dump is not corrupt by verifying the checksum. nisrom can do this.
- Proceed at your own risk, etc etc, the usual disclaimers.




***** typical setup : nisprog
nisprog offers an interactive, text-based interface. Most commands have a short help string if you add a question mark after the command name, like "set interface ?"
See the nisprog docs for more details.

- in the "set" submenu, make sure everything is OK. Example :
	set
	interface dumb
	port \\.\COM30
	dumbopts 0x48
	l2protocol iso14230
	initmode fast
	testerid 0xfc
	destaddr 0x10
	addrtype phys
	up
- protip : add those "set" commands to your scantool.ini
- car ignition ON (don't start the engine, and plug that battery charger !)
	nc
- it may be necessary to repeat that command a few times if it fails. I'm working on fixing this.
- set device type
    setdev 1
***** Send + run the kernel
    runkernel D:\dev\npkern\npkern.bin

***** important note *****
when trying the kernel on a new ECU, it's very important that both the kernel and the communications be stable.
- I recommend dumping all or parts of the ROM at least once (try " dm asdf.bin 0 1048576 " for a 1MB ROM). This should be pretty bulletproof.
- If comms eventually fail with a timeout / no response and nothing seems to work, maybe the WDT function of the kernel is inadequate and the ECU has automatically restarted.

Of course, if any problems are encountered during those basic tests, reflashing should *not* be attempted !!

***** reflashing
WIP, these steps may change frequently.
- make ABSOLUTELY sure the checksum of the new ROM file is ok before reflashing; more on this later. (TODO)


Example :
 - I have a 7058 and an awesome new ROM with a few changed bytes + checksum adjustment.
 

-- A dry run is nice to make sure everything is fine, just select 'p' ("practice mode") when prompted.
	flrom r7058_patched.bin
  (note, the dry run will of course fail verification at the first changed byte, since it hasn't modified the Flash memory)

 - Real reflash : check your battery charger !!! same command, but answer 'y' instead of 'p'
	flrom r7058_patched.bin


***** troubleshooting after reflash errors
- copy / save the last output with all the status + error mesages.
- usually the kernel is still running and accepting commands. To verify, try a short ROM dump, maybe "dm aaaa.bin 0 10000"

- If not, the kernel may be out of sync
(detailed explanation: if nisprog sends "01 3E 3F", but the kernel previously lost a byte,
then it thinks the packet is "3E 3F", which is incomplete / invalid. If this happens, the kernel's command buffer needs to be purged
manually (TODO : purge automatically / describe how?). I open realterm and send 0x00 bytes until I get a "0x7F something" response.

- if comms were an issue (read timeouts, "bad duplex" errors, etc), try again, or lower the speed by changing the divisor
  (TODO : implement command in nisprog, currently need to send the request manually)
   "sr 0xBE 0x01 0x0A" will set the divisor to 0x0A (10), giving 56800bps. See iso_cmds.h , for SID_CONF_SETSPEED

- if verification failed, try dumping the whole ROM and comparing to the desired file - maybe the writing step was successful anyway

- re-try reflashing, maybe with the original / stock data from the backup ROM instead.



***** reading from EEPROM
 - you need to know where the "eeprom_read()" function is in the ROM. nisrom can do this automatically for many ROMs.
 - give that location to the kernel : "sr 0xBE 0x02 <addr2> <addr1> <addr0>
   example if the function is at 0x035250 in the ROM :
	sr 0xbe 0x02 0x03 0x52 0x50
 - use "dumpmem" but add "eep" at the end to specify the address is in EEPROM:
	dumpmem eeprom_dump.bin 0 512 eep


***** All done ? reset the ECU !
	stopkernel
	npdisc
	
	
***** SUBARU section
- all the same warnings as above apply
- whilst nisprog was initially written for Nissan, it now has some additional commands for communicating with and flashing Subaru ECUs
- only Subaru ECUs based on SH7055S or SH7058 (that don't use CAN communications) are currently supported
- SH7058 has been bench-tested. SH7055S is yet to be tested (volunteers welcome).

Software Setup
- all files can be downloaded from github: https://github.com/fenugrec
- nisprog and npkern can be compiled from the github files, or the following minimum files are required for Subaru comms/flashing
	* nisprog.exe
	* ssmprog.ini
	* ssmk_SH7058.bin or ssmk_SH7055_18.bin
- put these files all in the same directory along with the binary ROM file for flashing (eg) newROM.bin
- newROM.bin needs to have Checksums corrected for any changes. If you use Romraider Editor this will be done automatically.

Hardware Setup
- a windows PC or laptop plugged in to power (if the laptop battery dies during a flash, the ECU may be bricked)
- any simple serial USB to OBD-II cable. Cheap ebay VAG-COM cables should be fine. Install the windows drivers that came with the cable.
- plug the cable into a USB port and make sure it is detected and working in Device Manager. Note the COMx number that the cable has connected to.
- plug the cable into the OBD-II port on your vehicle
- have a battery charger running on your car battery to ensure voltage doesn't drop too low (if this occurs, the ECU may be bricked)
- turn the key in the ignition to 'ON' but do not start the car

Initial setup
- edit ssmprog.ini to have the correct COMx number (from above):
	port \\.\COM1
- for Subaru, nisprog initially uses a RAW connection, and then switches to ISO14230. Therefore, the settings required in ssmprog.ini are:
	l2protocol RAW
	initmode fast
	testerid 0xf0
	destaddr 0x10
	addrtype phys
	speed 4800

Running nisprog
- nisprog interacts with a command line interface
- start a Command Shell in Windows (press Windows+R keys and type "cmd")
- move to the directory in which you stored nisprog.exe (eg: type "cd\nisprog")
- run nisprog with the start commands from ssmprog.ini (type "nisprog -f ssmprog.ini")

Connecting & SSM commands
- type "spconn" to connect to the Subaru ECU
- if connection is successful, the ECU ID number will be reported
- once connected, nisprog command "diag sr" can be used to interact with the ECU using the SSM protocol (see: https://romraider.com/index.php/RomRaider/SsmProtocol)
- only the command/response data needs to be entered (nisprog completes the header and checksum)
- for example, to issue an "ECU Init" request, type "diag sr 0xBF"
- another example, to read 8 bytes at 0xFFFF6000 type "diag sr 0xA0 0x00 0xFF 0x60 0x00 0x08"

Set 7055 or 7058
- type "setdev 7058" or "setdev 7055" to tell nisprog which ROM you have

Running the kernel
- type "sprunkernel ssmk_SH7058.bin" or "sprunkernel ssmk_SH7055_18.bin"
- if loading of the kernel is successful, the kernel build ID will be reported
- the ECU is now running from the kernel program in RAM and is no longer running from the ROM

Test kernel operation / dumping a ROM
- dumping a ROM is a good test to ensure stable operation
- type "dm TestDump.bin 0 0"
- this will take 3-4 minutes to dump the ROM into TestDump.bin. It wil auto-detect ROM size based on "setdev" command.
- review the file to ensure a successful dump

Flashing a whole ROM (practice or for real)
- type "flrom newROM.bin"
- enter "p" for practice mode or "y" for real mode
- nisprog will give you the choice to flash all blocks, or only the changed blocks

Exit Process
- if the kernel is running, type "stopkernel" to stop the kernel and restart the ECU
- all learned values in the RAM will be reset as part of this process
- if the kernel isn't running, type "npdisc" to disconnect from the ECU
- type "exit" to exit from nisprog and return to the command line

Troubleshooting
- you are mainly on your own
- see comments above in the Nissan section
- help may be availabe on the Romraider forums






 
 
